apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'

android {
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    signingConfigs {
        release {
            keyAlias 'yishangfei'
            keyPassword '898763'
            storeFile file('D:/xinzhushou.jks')
            storePassword '898763'
        }
        debug {
            keyAlias 'yishangfei'
            keyPassword '898763'
            storePassword '898763'
            storeFile file('D:/xinzhushou.jks')
        }
    }
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.yxld.xzs"
        multiDexEnabled true
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 13
        versionName "2.1.3"
        //语言资源，只支持中文
        resConfigs "zh"
//        resValue "string", "updatefun_provider_file_authorities", "com.yxld.xzsupdate.fileprovider"
        ndk {
            abiFilters "armeabi", "x86"
        }
        multiDexKeepProguard file("./tinker_multidexkeep.pro")
        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "38f843b57e1f182e93e0284e", //JPush上注册的包名对应的appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]

        //微信tinker热修复
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "MESSAGE", "\"I am the base apk\""

        buildConfigField "String", "TINKER_ID", "\"${getTinkerIdValue()}\""
        buildConfigField "String", "PLATFORM", "\"all\""
    }
    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
//        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//        }
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }
    compileOptions {
        targetCompatibility 1.7
        sourceCompatibility 1.7
    }
}

//def bakPath = file("${buildDir}/bakApk/")
//
//ext {
//    tinkerEnabled = true
//    //old apk file to build patch apk
//    tinkerOldApkPath = "${bakPath}/old.apk"
//    //proguard mapping file to build patch apk
//    tinkerApplyMappingPath = "${bakPath}/old-mapping.txt"
//}


repositories {
    mavenCentral()
    flatDir {
        dirs 'libs' //就是你放aar的目录地址
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:cardview-v7:25.3.1'
    compile 'com.android.support:support-v4:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support:multidex:1.0.1'

    //    //代码报错检测
    //    compile 'im.fir:fir-sdk:latest.integration@aar'
    //粒子爆炸特效
    //recycelerView 适配器

//可选，用于生成application类

    //公共监控
    compile files('libs/EZOpenSDK.jar')

    //代码报错检测
    compile name: 'BRVAHlibrary-release', ext: 'aar'
    //    compile files('libs/Bughd_android_sdk_v1.3.7.jar')
    compile name: 'updatefun-release', ext: 'aar'
    //    compile project(':updatefun')
    //    compile 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.0'
    //    compile 'io.reactivex:rxjava:1.1.8'
    //    compile 'io.reactivex:rxandroid:1.2.1'
    // Annotation
    //    compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    //摄像头核心库  该库引用了rxjava1.1.1版本
    //仿qq右上角

    compile 'com.google.dagger:dagger:2.0.2'

    // Rx
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'io.reactivex.rxjava2:rxjava:2.1.0'
    //这里为什么会依赖两次？？form William
//    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
//    compile 'io.reactivex.rxjava2:rxjava:2.1.0'
    //网络框架
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    compile 'com.squareup.retrofit2:converter-scalars:2.0.0-beta4'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    compile 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    //glide图片加载
    compile 'com.github.bumptech.glide:glide:3.7.0'
    //高斯模糊
    compile 'jp.wasabeef:glide-transformations:2.0.1'
    //StatusBar状态栏
    compile 'com.jaeger.statusbaruitl:library:1.3.6'
    //butterknife
    compile 'com.jakewharton:butterknife:8.5.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
    //屏幕适配
    compile 'com.zhy:autolayout:1.4.5'
    //自动更新
    //    compile 'cn.hugeterry.updatefun:updatefun:2.0.6'
    //权限管理
    compile 'com.tbruyelle.rxpermissions:rxpermissions:0.9.3@aar'
    //Logger打印
    compile 'com.orhanobut:logger:1.15'
    compile 'tyrantgit:explosionfield:1.0.1'
    //仿造ios选择
    compile 'ch.ielse:switchbutton:1.0.0'
    //极光推送
    compile 'cn.jiguang.sdk:jpush:3.0.3'
    compile 'cn.jiguang.sdk:jcore:1.1.1'
    //查看密码
    compile 'com.marlonmafra.android.widget:edittext-password:1.0.0'
    //二维码
    compile 'cn.yipianfengye.android:zxing-library:2.2'
    //eventbus
    compile 'org.greenrobot:eventbus:3.0.0'
    //tinker的核心库
    compile 'com.tencent.tinker:tinker-android-lib:1.9.1'
    provided 'com.tencent.tinker:tinker-android-anno:1.9.1'
    //图片选择
    compile 'com.jph.takephoto:takephoto_library:4.0.3'
    //仿iOS的AlertViewController
    compile 'com.bigkoo:alertview:1.0.3'
    compile 'com.github.ganfra:material-spinner:1.1.1'
    //七牛
    compile 'com.qiniu:qiniu-android-sdk:7.3.2'
    //图片放大
    compile 'com.github.MrWangChong:DragPhotoView:1.0.6'
    //日志打印
    compile 'com.github.zhaokaiqiang.klog:library:1.6.0'

    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.p2p.core:p2p-core:0.3.8'
    //声波配网库
    compile 'com.github.jwkj:SoundWaveSender:v2.0.2'
    //局域网搜索管理器
    compile 'com.github.jwkj:ShakManger:v1.0.1'
    //声波配网库所依赖的udp通讯库，不可删除
    compile 'com.jwkj:udpsender:v2.0.1'
    compile 'com.zaaach:toprightmenu:1.0'
    compile 'com.yanzhenjie:permission:1.0.8'
    compile 'com.jaredrummler:material-spinner:1.1.0'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.0.2'

    provided 'org.glassfish:javax.annotation:10.0-b28'
    //阿里云推送
    compile 'com.aliyun.ams:alicloud-android-push:3.0.11@aar'
    compile 'com.aliyun.ams:alicloud-android-utdid:1.1.5.3'
    compile 'com.aliyun.ams:alicloud-android-ut:5.1.0'
    compile 'com.aliyun.ams:alicloud-android-third-push:3.0.5@aar'
    //腾讯bugly
    compile 'com.tencent.bugly:crashreport:latest.release'
    compile 'com.tencent.bugly:nativecrashreport:latest.release'
    //下拉刷新
    compile 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.4'
    compile 'com.scwang.smartrefresh:SmartRefreshHeader:1.0.4'
    //图案锁
    compile 'com.github.ihsg:PatternLocker:2.0.0'
}

def gitSha() {
    try {
        // String gitRev = 'git rev-parse --short HEAD'.execute(null, project.rootDir).text.trim()
        String gitRev = "1008611"
        if (gitRev == null) {
            throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
        }
        return gitRev
    } catch (Exception e) {
        throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
    }
}

def bakPath = file("${buildDir}/bakApk/")

ext {
    //for some reason, you may want to ignore tinkerBuild, such as instant run debug build?
    tinkerEnabled = false

    //for normal build
    //old apk file to build patch apk
    tinkerOldApkPath = "${bakPath}/app-release-0421-12-34-45.apk"
    //proguard mapping file to build patch apk
    tinkerApplyMappingPath = "${bakPath}/app-release-0421-12-34-45-mapping.txt"
    //resource R.txt to build patch apk, must input if there is resource changed
    tinkerApplyResourcePath = "${bakPath}/app-release-0421-12-34-45-R.txt"

    //only use for build all flavor, if not, just ignore this field
    tinkerBuildFlavorDirectory = "${bakPath}/app-0421-12-34-45"
}

def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : gitSha()
}

def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? TINKER_ENABLE : ext.tinkerEnabled
}

def getTinkerBuildFlavorDirectory() {
    return ext.tinkerBuildFlavorDirectory
}

//微信tinker热修复
if (buildWithTinker()) {
    apply plugin: 'com.tencent.tinker.patch'

    tinkerPatch {
        /**
         * 默认为null
         * 将旧的apk和新的apk建立关联
         * 从build / bakApk添加apk
         */
        oldApk = getOldApkPath()
        /**
         * 可选，默认'false'
         * 有些情况下我们可能会收到一些警告
         * 如果ignoreWarning为true，我们只是断言补丁过程
         * case 1：minSdkVersion低于14，但是你使用dexMode与raw。
         * case 2：在AndroidManifest.xml中新添加Android组件，
         * case 3：装载器类在dex.loader {}不保留在主要的dex，
         * 它必须让tinker不工作。
         * case 4：在dex.loader {}中的loader类改变，
         * 加载器类是加载补丁dex。改变它们是没有用的。
         * 它不会崩溃，但这些更改不会影响。你可以忽略它
         * case 5：resources.arsc已经改变，但是我们不使用applyResourceMapping来构建
         */
        ignoreWarning = false

        /**
         * 可选，默认为“true”
         * 是否签名补丁文件
         * 如果没有，你必须自己做。否则在补丁加载过程中无法检查成功
         * 我们将使用sign配置与您的构建类型
         */
        useSign = true

        /**
         可选，默认为“true”
         是否使用tinker构建
         */
        tinkerEnable = buildWithTinker()

        /**
         * 警告，applyMapping会影响正常的android build！
         */
        buildConfig {
            /**
             * 可选，默认为'null'
             * 如果我们使用tinkerPatch构建补丁apk，你最好应用旧的
             * apk映射文件如果minifyEnabled是启用！
             * 警告：你必须小心，它会影响正常的组装构建！
             */
            applyMapping = getApplyMappingPath()
            /**
             * 可选，默认为'null'
             * 很高兴保持资源ID从R.txt文件，以减少java更改
             */
            applyResourceMapping = getApplyResourceMappingPath()

            /**
             * 必需，默认'null'
             * 因为我们不想检查基地apk与md5在运行时（它是慢）
             * tinkerId用于在试图应用补丁时标识唯一的基本apk。
             * 我们可以使用git rev，svn rev或者简单的versionCode。
             * 我们将在您的清单中自动生成tinkerId
             */
            tinkerId = getTinkerIdValue()

            /**
             * 如果keepDexApply为true，则表示dex指向旧apk的类。
             * 打开这可以减少dex diff文件大小。
             */
            keepDexApply = false
        }

        dex {
            /**
             * 可选，默认'jar'
             * 只能是'raw'或'jar'。对于原始，我们将保持其原始格式
             * 对于jar，我们将使用zip格式重新包装dexes。
             * 如果你想支持下面14，你必须使用jar
             * 或者你想保存rom或检查更快，你也可以使用原始模式
             */
            dexMode = "jar"

            /**
             * 必需，默认'[]'
             * apk中的dexes应该处理tinkerPatch
             * 它支持*或？模式。
             */
            pattern = ["classes*.dex",
                       "assets/secondary-dex-?.jar"]
            /**
             * 必需，默认'[]'
             * 警告，这是非常非常重要的，加载类不能随补丁改变。
             * 因此，它们将从补丁程序中删除。
             * 你必须把下面的类放到主要的dex。
             * 简单地说，你应该添加自己的应用程序{@code tinker.sample.android.SampleApplication}
             * 自己的tinkerLoader，和你使用的类
             *
             */
            loader = [
                    //use sample, let BaseBuildInfo unchangeable with tinker
                    "tinker.sample.android.app.BaseBuildInfo"
            ]
        }

        lib {
            /**
             可选，默认'[]'
             apk中的图书馆应该处理tinkerPatch
             它支持*或？模式。
             对于资源库，我们只是在补丁目录中恢复它们
             你可以得到他们在TinkerLoadResult与Tinker
             */
            pattern = ["lib/armeabi/*.so"]
        }

        res {
            /**
             * 可选，默认'[]'
             * apk中的什么资源应该处理tinkerPatch
             * 它支持*或？模式。
             * 你必须包括你在这里的所有资源，
             * 否则，他们不会重新包装在新的apk资源。
             */
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]

            /**
             * 可选，默认'[]'
             * 资源文件排除模式，忽略添加，删除或修改资源更改
             * *它支持*或？模式。
             * *警告，我们只能使用文件没有relative与resources.arsc
             */
            ignoreChange = ["assets/sample_meta.txt"]

            /**
             * 默认100kb
             * *对于修改资源，如果它大于'largeModSize'
             * *我们想使用bsdiff算法来减少补丁文件的大小
             */
            largeModSize = 100
        }

        packageConfig {
            /**
             * 可选，默认'TINKER_ID，TINKER_ID_VALUE'，'NEW_TINKER_ID，NEW_TINKER_ID_VALUE'
             * 包元文件gen。路径是修补程序文件中的assets / package_meta.txt
             * 你可以在您自己的PackageCheck方法中使用securityCheck.getPackageProperties（）
             * 或TinkerLoadResult.getPackageConfigByName
             * 我们将从旧的apk清单为您自动获取TINKER_ID，
             * 其他配置文件（如下面的patchMessage）不是必需的
             */
            configField("patchMessage", "tinker is sample to use")
            /**
             * 只是一个例子，你可以使用如sdkVersion，品牌，渠道...
             * 你可以在SamplePatchListener中解析它。
             * 然后你可以使用补丁条件！
             */
            configField("platform", "all")
            /**
             * 补丁版本通过packageConfig
             */
            configField("patchVersion", "1.0")
        }
        //或者您可以添加外部的配置文件，或从旧apk获取元值
        //project.tinkerPatch.packageConfig.configField("test1", project.tinkerPatch.packageConfig.getMetaDataFromOldApk("Test"))
        //project.tinkerPatch.packageConfig.configField("test2", "sample")

        /**
         * 如果你不使用zipArtifact或者path，我们只是使用7za来试试
         */
        sevenZip {
            /**
             * 可选，默认'7za'
             * 7zip工件路径，它将使用正确的7za与您的平台
             */
            zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
            /**
             * 可选，默认'7za'
             * 你可以自己指定7za路径，它将覆盖zipArtifact值
             */
//        path = "/usr/local/bin/7za"
        }
    }

    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
    /**
     * bak apk and mapping
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name
        def date = new Date().format("MMdd-HH-mm-ss")

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                        from variant.outputs.outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }
    project.afterEvaluate {
        //sample use for build all flavor for one time
        if (hasFlavors) {
            task(tinkerPatchAllFlavorRelease) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"

                    }

                }
            }

            task(tinkerPatchAllFlavorDebug) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
                    }

                }
            }
        }
    }
}